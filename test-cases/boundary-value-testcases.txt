# 境界値テストケース

## 対象URL
http://127.0.0.1:5500/sample-site/index.html

## テストケース一覧

### TC_BV_001: データ0件の状態
【前提条件】
- ページを新規で開いた状態

【確認項目】
1. エンプティメッセージ「データがありません」が表示されていること
   - セレクタ: #emptyMessage
   - 期待値: 表示(visible)

2. ヒントメッセージ「上記のフォームからデータを追加してください」が表示されていること
   - セレクタ: .empty-hint
   - 期待値: 表示(visible)

3. テーブルが非表示であること
   - セレクタ: #tableContainer
   - 期待値: 非表示(not visible)

4. ページングが非表示であること
   - セレクタ: #pagination
   - 期待値: 非表示(not visible)

5. 件数表示が「全 0 件」であること
   - セレクタ: #totalCount
   - 期待値: テキストに「0 件」を含む

---

### TC_BV_002: データ1件追加後の状態
【前提条件】
- TC_BV_001の状態

【操作手順】
1. #name に「テストユーザー1」を入力
2. #email に「user1@example.com」を入力
3. #age に「25」を入力
4. #submitBtn をクリック
5. 500ms待機（データ追加処理完了待ち）

【確認項目】
1. エンプティメッセージが非表示になること
   - セレクタ: #emptyMessage
   - 期待値: 非表示(not visible)

2. テーブルが表示されること
   - セレクタ: #tableContainer
   - 期待値: 表示(visible)

3. テーブル行数が1件であること
   - セレクタ: #tableBody tr
   - 期待値: カウント = 1

4. ページングが非表示のままであること
   - セレクタ: #pagination
   - 期待値: 非表示(not visible)

5. 件数表示が「全 1 件」であること
   - セレクタ: #totalCount
   - 期待値: テキストに「1 件」を含む

6. 追加したデータが正しく表示されていること
   - No.1の名前: 「テストユーザー1」
   - No.1のメール: 「user1@example.com」
   - No.1の年齢: 「25」
   - No.1の部署: 「未設定」

---

### TC_BV_003: データ19件追加後の状態
【前提条件】
- ページを新規で開いた状態

【操作手順】
1. 以下のデータを19件追加（ループ処理）
   - 名前: テストユーザー1〜19
   - メール: user1@example.com〜user19@example.com
   - 年齢: 25〜43（順番に）
   - 部署: 「開発」「営業」「人事」「総務」「経理」をローテーション
   - 各データ追加後に200ms待機

【確認項目】
1. テーブル行数が19件であること
   - セレクタ: #tableBody tr
   - 期待値: カウント = 19

2. ページングが非表示であること
   - セレクタ: #pagination
   - 期待値: 非表示(not visible)

3. 件数表示が「全 19 件」であること
   - セレクタ: #totalCount
   - 期待値: テキストに「19 件」を含む

4. すべてのデータが1ページ内に表示されていること
   - 最初の行のNo.: 1
   - 最後の行のNo.: 19

---

### TC_BV_004: データ20件追加後の状態（境界値）
【前提条件】
- ページを新規で開いた状態

【操作手順】
1. 以下のデータを20件追加（ループ処理）
   - 名前: テストユーザー1〜20
   - メール: user1@example.com〜user20@example.com
   - 年齢: 25〜44（順番に）
   - 部署: 「開発」「営業」「人事」「総務」「経理」をローテーション
   - 各データ追加後に200ms待機

【確認項目】
1. テーブル行数が20件であること
   - セレクタ: #tableBody tr
   - 期待値: カウント = 20

2. ページングが非表示であること（重要: 20件はちょうど1ページ分）
   - セレクタ: #pagination
   - 期待値: 非表示(not visible)

3. 件数表示が「全 20 件」であること
   - セレクタ: #totalCount
   - 期待値: テキストに「20 件」を含む

4. すべてのデータが1ページ内に表示されていること
   - 最初の行のNo.: 1
   - 最後の行のNo.: 20

5. データの最終行が「テストユーザー20」であること
   - セレクタ: #tableBody tr:last-child td:nth-child(2)
   - 期待値: テキスト = 「テストユーザー20」

---

### TC_BV_005: データ21件追加後の状態（境界値超え）
【前提条件】
- ページを新規で開いた状態

【操作手順】
1. 以下のデータを21件追加（ループ処理）
   - 名前: テストユーザー1〜21
   - メール: user1@example.com〜user21@example.com
   - 年齢: 25〜45（順番に）
   - 部署: 「開発」「営業」「人事」「総務」「経理」をローテーション
   - 各データ追加後に100ms待機

【確認項目】
1. ページングコントロールが表示されること
   - セレクタ: #pagination
   - 期待値: 表示(visible)

2. ページ情報が「2 / 2」であること
   - セレクタ: #pageInfo
   - 期待値: テキスト = 「2 / 2」

3. 現在のページ（2ページ目）に1件のデータが表示されていること
   - セレクタ: #tableBody tr
   - 期待値: カウント = 1

4. 件数表示が「全 21 件」であること
   - セレクタ: #totalCount
   - 期待値: テキストに「21 件」を含む

5. 2ページ目の最初のデータが「テストユーザー21」であること
   - セレクタ: #tableBody tr:first-child td:nth-child(2)
   - 期待値: テキスト = 「テストユーザー21」

6. 2ページ目の最初のデータのNo.が「21」であること
   - セレクタ: #tableBody tr:first-child td:first-child
   - 期待値: テキスト = 「21」

7. 1ページ目に戻ると20件のデータが表示されること
   - #firstPageBtn をクリック
   - #tableBody tr のカウント = 20
   - 最初の行のNo.: 1
   - 最後の行のNo.: 20

---

### TC_BV_006: データ40件追加後の状態（ちょうど2ページ分）
【前提条件】
- ページを新規で開いた状態

【操作手順】
1. 以下のデータを40件追加（ループ処理）
   - 名前: テストユーザー1〜40
   - メール: user1@example.com〜user40@example.com
   - 年齢: 25〜64（順番に）
   - 部署: 「開発」「営業」「人事」「総務」「経理」をローテーション
   - 各データ追加後に50ms待機

【確認項目】
1. ページ情報が「2 / 2」であること
   - セレクタ: #pageInfo
   - 期待値: テキスト = 「2 / 2」

2. 2ページ目に20件のデータが表示されていること
   - セレクタ: #tableBody tr
   - 期待値: カウント = 20

3. 2ページ目の最初のデータのNo.が「21」であること
   - セレクタ: #tableBody tr:first-child td:first-child
   - 期待値: テキスト = 「21」

4. 2ページ目の最後のデータのNo.が「40」であること
   - セレクタ: #tableBody tr:last-child td:first-child
   - 期待値: テキスト = 「40」

5. 件数表示が「全 40 件」であること
   - セレクタ: #totalCount
   - 期待値: テキストに「40 件」を含む

---

### TC_BV_007: データ41件追加後の状態（3ページ目発生）
【前提条件】
- ページを新規で開いた状態

【操作手順】
1. 以下のデータを41件追加（ループ処理）
   - 名前: テストユーザー1〜41
   - メール: user1@example.com〜user41@example.com
   - 年齢: 25〜65（順番に）
   - 部署: 「開発」「営業」「人事」「総務」「経理」をローテーション
   - 各データ追加後に50ms待機

【確認項目】
1. ページ情報が「3 / 3」であること
   - セレクタ: #pageInfo
   - 期待値: テキスト = 「3 / 3」

2. 3ページ目に1件のデータが表示されていること
   - セレクタ: #tableBody tr
   - 期待値: カウント = 1

3. 3ページ目のデータのNo.が「41」であること
   - セレクタ: #tableBody tr:first-child td:first-child
   - 期待値: テキスト = 「41」

4. 件数表示が「全 41 件」であること
   - セレクタ: #totalCount
   - 期待値: テキストに「41 件」を含む

5. 各ページのデータ件数が正しいこと
   - #firstPageBtn をクリック → 1ページ目: 20件（No.1〜20）
   - #nextPageBtn をクリック → 2ページ目: 20件（No.21〜40）
   - #nextPageBtn をクリック → 3ページ目: 1件（No.41）

---

## テストデータ生成ヘルパー関数

### 1件のデータを追加する関数
```javascript
async function addSingleData(page, index) {
  const departments = ['開発', '営業', '人事', '総務', '経理'];

  await page.fill('#name', `テストユーザー${index}`);
  await page.fill('#email', `user${index}@example.com`);
  await page.fill('#age', String(24 + index));

  if (index % 5 < departments.length) {
    await page.selectOption('#department', departments[index % 5]);
  }

  await page.click('#submitBtn');
  await page.waitForTimeout(200);
}
```

### 複数件のデータを追加する関数
```javascript
async function addMultipleData(page, count, waitTime = 200) {
  for (let i = 1; i <= count; i++) {
    await addSingleData(page, i);
    await page.waitForTimeout(waitTime);
  }
}
```

---

## セレクタ一覧

### フォーム
- #name : 名前入力フィールド
- #email : メールアドレス入力フィールド
- #age : 年齢入力フィールド
- #department : 部署選択フィールド
- #submitBtn : 追加ボタン
- #resetBtn : クリアボタン

### 表示要素
- #emptyMessage : エンプティメッセージ
- .empty-hint : ヒントメッセージ
- #tableContainer : テーブルコンテナ
- #tableBody : テーブルボディ
- #tableBody tr : テーブル行
- #totalCount : 件数表示

### ページング
- #pagination : ページングコンテナ
- #pageInfo : ページ情報（例: "1 / 3"）
- #firstPageBtn : 最初へボタン
- #prevPageBtn : 前へボタン
- #nextPageBtn : 次へボタン
- #lastPageBtn : 最後へボタン

---

最終更新: 2025年10月25日
